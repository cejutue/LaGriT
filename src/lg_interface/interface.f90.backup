module lg_interface
    use iso_c_binding
    implicit none

    private
    public :: &
        entryprocessed, &
        cread4, &
        cread4_ptr, &
        cread4_int, &
        cread4_int_ptr, &
        cread8

interface

!contains

integer(kind=c_int) function entryprocessed(i, j) bind(c)! &
    !bind(C, name="entryprocessed_")
    use iso_c_binding, only: c_int
    implicit none
    integer :: i, j
end function

subroutine cread4(unit, array, ilen, ierr) bind(c, name="cread")
    use iso_c_binding
    implicit none

    integer(kind=4) :: unit
    integer :: ilen, ierr
    real(C_FLOAT) :: array
end subroutine

subroutine cread4_ptr(unit, array, ilen, ierr) bind(c, name="cread")
    use iso_c_binding
    implicit none

    integer(kind=4) :: unit
    integer :: ilen, ierr
    real(C_FLOAT) :: array(*)
end subroutine

subroutine cread4_int(unit, array, ilen, ierr) bind(c, name="cread")
    use iso_c_binding
    implicit none

    integer(kind=4) :: unit
    integer :: ilen, ierr
    integer(kind=4) :: array
end subroutine

subroutine cread4_int_ptr(unit, array, ilen, ierr) bind(c, name="cread")
    use iso_c_binding
    implicit none

    integer(kind=4) :: unit
    integer :: ilen, ierr
    integer(kind=4) :: array(*)
end subroutine

subroutine cread8(unit, array, ilen, ierr) bind(c, name="cread")
    use iso_c_binding
    implicit none

    integer(kind=4) :: unit
    integer :: ilen, ierr
    real(c_double) :: array
end subroutine

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

subroutine computeentry(Pindex_i, Pindex_j, PnumIncidentTets, incidentTets, localEdges) &
    bind(c, name="computeentry_")
    use iso_c_binding, only: c_int
    implicit none

    integer :: Pindex_i, Pindex_j, PnumIncidentTets, &
               incidentTets, localEdges
end subroutine

C     void initialize3ddiffusionmat_(int_ptrsize *pentrysize,
C             int_ptrsize *pcompress, int_ptrsize *pnnodes, double *xic,
C             double *yic, double *zic, int_ptrsize *pntets,
C             int_ptrsize *itet, int_ptrsize *jtet,
C             int_ptrsize *pmbndry, int_ptrsize *ifhybrid,
C             double *hybrid_factor, double *eps)
          subroutine initialize3ddiffusionmat
     &    (pentrysize, pcompress, pnnodes, xic, yic, zic, pntets, itet,
     &     jtet, pmbndry, ifhybrid, hybrid_factor, eps)
     &    BIND(C, name="initialize3ddiffusionmat_")
            use ISO_C_BINDING, only : C_INT, C_FLOAT, C_DOUBLE
            implicit none

            integer :: pentrysize, pcompress, pnnodes, pntets
            integer :: itet, jtet, pmbndry, ifhybrid
            real(C_DOUBLE) :: xic, yic, zic, hybrid_factor, eps
          end subroutine initialize3ddiffusionmat



end interface
end module